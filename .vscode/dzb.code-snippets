{
  "genListScreen": {
    "prefix": "genListScreen",
    "body": [
      "import React from 'react';",
      "import { useTheme } from '@mui/material';",
      "import { useFormatter } from 'next-intl';",
      "",
      "import { Order } from 'interfaces/common';",
      "import CommonStyles from 'components/CommonStyles';",
      "import useFiltersHandler from 'hooks/useFiltersHandler';",
      "import useGetBookList from 'modules/book/hooks/useGetBookList';",
      "import { Products } from 'modules/book/book.interface';",
      "import SearchAndFilters from 'components/SearchAndFilters';",
      "import { FastField } from 'formik';",
      "import CustomFields from 'components/CustomFields';",
      "import useConstants from 'hooks/useConstants';",
      "",
      "interface ${1}Props {}",
      "",
      "const ${1} = (props: ${1}Props) => {",
      "  //! State",
      "  const { optionsActiveOrInactive } = useConstants();",
      "  const {",
      "    filters,",
      "    rowsSelected,",
      "    resetToInitialFilters,",
      "    handleSelectAll,",
      "    handleCheckBox,",
      "    handleChangePage,",
      "    handleRequestSort,",
      "    changeRowPerPage,",
      "    handleSearch,",
      "  } = useFiltersHandler({",
      "    page: 1,",
      "    perPage: 5,",
      "    search: '',",
      "    status: '',",
      "  });",
      "",
      "  const { data: dataBook, isLoading, isRefetching, isFetchingPage } = useGetBookList(filters);",
      "  const format = useFormatter();",
      "  const theme = useTheme();",
      "",
      "  //! Function",
      "  const totalCount = dataBook?.total || 100;",
      "",
      "  //! Render",
      "  return (",
      "    <CommonStyles.Box>",
      "      <CommonStyles.Box sx={{ mt: 2 }}>",
      "        <CommonStyles.Box sx={{ flex: 1, mb: 2 }}>",
      "          <SearchAndFilters",
      "            initialValues={filters}",
      "            onSubmit={(values) => {",
      "              handleSearch(values);",
      "            }}",
      "            onReset={() => {",
      "              resetToInitialFilters();",
      "            }}",
      "            sxContainer={{ display: 'flex', justifyContent: 'space-between' }}",
      "            renderFilterFields={() => {",
      "              return (",
      "                <CommonStyles.Box sx={{ gap: 2, display: 'flex', flex: 1 }}>",
      "                  <FastField",
      "                    component={CustomFields.TextField}",
      "                    name='search'",
      "                    placeholder='Search'",
      "                    sx={{ width: '100%' }}",
      "                    size='small'",
      "                  />",
      "                  <FastField",
      "                    component={CustomFields.SelectField}",
      "                    name='status'",
      "                    options={optionsActiveOrInactive}",
      "                    label='Status'",
      "                    fullWidth",
      "                    size='small'",
      "                  />",
      "                </CommonStyles.Box>",
      "              );",
      "            }}",
      "          />",
      "        </CommonStyles.Box>",
      "",
      "        <CommonStyles.Table",
      "          isLoading={isLoading || isRefetching || isFetchingPage}",
      "          order={Order.desc}",
      "          orderBy={Order.desc}",
      "          selected={rowsSelected}",
      "          page={filters.page}",
      "          headCells={[",
      "            {",
      "              label: 'OrderID',",
      "              id: 'id',",
      "            },",
      "            {",
      "              label: 'Customer name',",
      "              id: 'title',",
      "              Cell: (row: Products) => {",
      "                const title = row?.title || '';",
      "                return (",
      "                  <CommonStyles.Typography sx={{ fontWeight: '700' }}>",
      "                    {title}",
      "                  </CommonStyles.Typography>",
      "                );",
      "              },",
      "            },",
      "            {",
      "              label: 'Status',",
      "              id: 'price',",
      "              Cell: (row: Products) => {",
      "                const price = row?.price || '';",
      "                return <CommonStyles.Badge label={price} category='purple' />;",
      "              },",
      "            },",
      "            {",
      "              label: 'Payment status',",
      "              id: 'brand',",
      "              Cell: (row: Products) => {",
      "                const brand = row?.brand || '';",
      "                return <CommonStyles.Badge label={brand} category='blueNoBg' />;",
      "              },",
      "            },",
      "            {",
      "              label: 'Category',",
      "              id: 'category',",
      "              Cell: (row: Products) => {",
      "                const category = row?.category || '';",
      "                return <CommonStyles.Badge label={category} category='blue' />;",
      "              },",
      "            },",
      "            {",
      "              label: 'Order amount',",
      "              id: 'price',",
      "            },",
      "            {",
      "              label: 'Tour name',",
      "              id: 'description',",
      "            },",
      "            {",
      "              label: 'Tour guide',",
      "              id: 'stock',",
      "            },",
      "          ]}",
      "          totalCount={totalCount}",
      "          rows={dataBook?.products || []}",
      "          handleChangePage={handleChangePage}",
      "          handleChangeRowsPerPage={changeRowPerPage}",
      "          rowsPerPage={filters.limit}",
      "          handleRequestSort={handleRequestSort}",
      "          handleSelectAllClick={handleSelectAll}",
      "          handleCheckBox={handleCheckBox}",
      "        />",
      "      </CommonStyles.Box>",
      "    </CommonStyles.Box>",
      "  );",
      "};",
      "",
      "export default React.memo(${1});",
      ""
    ],
    "description": "genListScreen"
  },
  "genHooks": {
    "prefix": "genHooks",
    "body": [
      "import { useCallback, useEffect, useState } from 'react';",
      "import todoServices from '../todo.services';",
      "import { ResponseGetTodoList, Todo } from '../todo.interface';",
      "",
      "const ${1} = () => {",
      "  const [data, setData] = useState<Todo[]>([]);",
      "  const [isLoading, setLoading] = useState(false);",
      "  const [error, setError] = useState<unknown>('');",
      "",
      "  const callApi = useCallback(() => {",
      "    return todoServices.getTodoList();",
      "  }, []);",
      "",
      "  const transformResponse = useCallback((response: ResponseGetTodoList) => {",
      "    if (response) {",
      "      setData(response?.data);",
      "    }",
      "  }, []);",
      "",
      "  const refetch = useCallback(async () => {",
      "    try {",
      "      const response = await callApi();",
      "      transformResponse(response);",
      "    } catch (error) {",
      "      setError(error);",
      "    }",
      "  }, []);",
      "",
      "  useEffect(() => {",
      "    let shouldSetData = true;",
      "",
      "    (async () => {",
      "      try {",
      "        setLoading(true);",
      "        const response = await callApi();",
      "        if (shouldSetData) {",
      "          transformResponse(response);",
      "        }",
      "      } catch (error) {",
      "        setError(error);",
      "      } finally {",
      "        setLoading(false);",
      "      }",
      "    })();",
      "",
      "    return () => {",
      "      shouldSetData = false;",
      "    };",
      "  }, []);",
      "",
      "  return {",
      "    data,",
      "    isLoading,",
      "    error,",
      "    refetch,",
      "  };",
      "};",
      "",
      "export default ${2};",
      ""
    ],
    "description": "genHooks"
  },
  "genHooksPaging": {
    "prefix": "genHooksPaging",
    "body": [
      "import { useEffect, useState, useCallback } from 'react';",
      "import cloneDeep from 'lodash/cloneDeep';",
      "import { isArray, isEmpty } from 'lodash';",
      "import { useSave } from 'stores/useStore';",
      "import { showError } from 'helpers/toast';",
      "",
      "import { Todo, RequestGetTodoListPaging, ResponseGetTodoListPaging } from '../todo.interface';",
      "import todoService from '../todo.services';",
      "",
      "/**",
      " * SNIPPET GENERATED",
      " * GUIDE",
      " * Snippet for infinite scroll with page + rowsPerPage",
      " * Maybe you should check function:",
      " * - interface Request / Response",
      " * - parseRequest",
      " * - checkConditionPass",
      " * - fetch",
      " * - refetch",
      " */",
      "",
      "//* Check parse body request",
      "const parseRequest = (filters: RequestGetTodoListPaging) => {",
      "  return cloneDeep({",
      "    page: filters.page,",
      "    limit: filters.limit,",
      "  });",
      "};",
      "",
      "const ${1} = (",
      "  filters: RequestGetTodoListPaging,",
      "  options: { isTrigger?: boolean; refetchKey?: string } = { isTrigger: true, refetchKey: '' }",
      ") => {",
      "  //! State",
      "  const { isTrigger = true, refetchKey = '' } = options;",
      "",
      "  const save = useSave();",
      "  const [data, setData] = useState<Todo[]>([]);",
      "  const [isLoading, setLoading] = useState(false);",
      "  const [isRefetching, setRefetching] = useState(false);",
      "  const [isFetchingPage, setFetchingPage] = useState(false);",
      "  const [error, setError] = useState<unknown>(null);",
      "  const [hasMore, setHasMore] = useState(false);",
      "",
      "  //! Function",
      "  const fetch: () => Promise<ResponseGetTodoListPaging> | undefined = useCallback(() => {",
      "    if (!isTrigger) {",
      "      return;",
      "    }",
      "",
      "    return new Promise((resolve, reject) => {",
      "      (async () => {",
      "        try {",
      "          const nextFilters = parseRequest(filters);",
      "          const response = await todoService.getTodoListPaging(nextFilters);",
      "          resolve(response);",
      "        } catch (error) {",
      "          setError(error);",
      "          reject(error);",
      "        }",
      "      })();",
      "    });",
      "  }, [filters, isTrigger]);",
      "",
      "  const checkConditionPass = useCallback(",
      "    (response: ResponseGetTodoListPaging) => {",
      "      //* Check condition of response here to set data",
      "      if (isArray(response?.data)) {",
      "        setData(response?.data);",
      "        setHasMore(!isEmpty(response?.data));",
      "      }",
      "    },",
      "    [filters.limit]",
      "  );",
      "",
      "  const fetchChangePage = useCallback(",
      "    async (shouldSetData: boolean) => {",
      "      setFetchingPage(true);",
      "      const response = await fetch();",
      "      if (shouldSetData && response) {",
      "        checkConditionPass(response);",
      "      }",
      "",
      "      setFetchingPage(false);",
      "    },",
      "    [fetch, checkConditionPass]",
      "  );",
      "",
      "  //* Refetch implicity (without changing loading state)",
      "  const refetch = useCallback(async () => {",
      "    try {",
      "      setRefetching(true);",
      "      const nextFilters = parseRequest(filters);",
      "      const response = await todoService.getTodoListPaging(nextFilters);",
      "      checkConditionPass(response);",
      "      setRefetching(false);",
      "    } catch (error: any) {",
      "      if (!error.isCanceled) {",
      "        showError(error);",
      "      }",
      "    }",
      "  }, [filters]);",
      "",
      "  useEffect(() => {",
      "    save(refetchKey, refetch);",
      "  }, [save, refetchKey, refetch]);",
      "",
      "  //* Refetch with changing loading state",
      "  const refetchWithLoading = useCallback(",
      "    async (shouldSetData: boolean) => {",
      "      try {",
      "        setLoading(true);",
      "        const response = await fetch();",
      "        if (shouldSetData && response) {",
      "          checkConditionPass(response);",
      "        }",
      "        setLoading(false);",
      "      } catch (error) {",
      "        showError(error);",
      "        setLoading(false);",
      "      }",
      "    },",
      "    [fetch, checkConditionPass]",
      "  );",
      "",
      "  useEffect(() => {",
      "    let shouldSetData = true;",
      "    if (filters.page !== undefined && filters.page <= 0) {",
      "      refetchWithLoading(shouldSetData);",
      "      return;",
      "    }",
      "",
      "    //* If offset > 0 -> fetch more",
      "    fetchChangePage(shouldSetData);",
      "",
      "    return () => {",
      "      shouldSetData = false;",
      "    };",
      "  }, [filters.page, fetchChangePage, refetchWithLoading]);",
      "",
      "  return {",
      "    data,",
      "    isLoading,",
      "    error,",
      "    refetch,",
      "    refetchWithLoading,",
      "    isRefetching,",
      "    isFetchingPage,",
      "    hasMore,",
      "    setData,",
      "  };",
      "};",
      "",
      "export default ${1};",
      ""
    ],
    "description": "genHooksPaging"
  },
  "genHooksInfiniteScroll": {
    "prefix": "genHooksInfiniteScroll",
    "body": [
      "import { useEffect, useState, useCallback } from 'react';",
      "import cloneDeep from 'lodash/cloneDeep';",
      "import { flatten, isArray, isEmpty } from 'lodash';",
      "import { useSave } from 'stores/useStore';",
      "import { showError } from 'helpers/toast';",
      "",
      "import { Todo, RequestGetTodoListPaging, ResponseGetTodoListPaging } from '../todo.interface';",
      "import todoService from '../todo.services';",
      "",
      "/**",
      " * SNIPPET GENERATED",
      " * GUIDE",
      " * Snippet for infinite scroll with page + rowsPerPage",
      " * Maybe you should check function:",
      " * - interface Request / Response",
      " * - parseRequest",
      " * - checkConditionPass",
      " * - fetch",
      " * - refetch",
      " */",
      "",
      "//* Check parse body request",
      "const parseRequest = (filters: RequestGetTodoListPaging) => {",
      "  return cloneDeep({",
      "    page: filters.page,",
      "    limit: filters.limit",
      "  });",
      "};",
      "",
      "const ${1} = (",
      "  filters: RequestGetTodoListPaging,",
      "  options: { isTrigger?: boolean; refetchKey?: string } = { isTrigger: true, refetchKey: '' }",
      ") => {",
      "  //! State",
      "  const { isTrigger = true, refetchKey = '' } = options;",
      "",
      "  const save = useSave();",
      "  const [data, setData] = useState<Todo[]>([]);",
      "  const [loading, setLoading] = useState(false);",
      "  const [refetching, setRefetching] = useState(false);",
      "  const [loadingMore, setLoadingMore] = useState(false);",
      "  const [error, setError] = useState<unknown>(null);",
      "  const [hasMore, setHasMore] = useState(false);",
      "",
      "  //! Function",
      "  const fetch: () => Promise<ResponseGetTodoListPaging> | undefined = useCallback(() => {",
      "    if (!isTrigger) {",
      "      return;",
      "    }",
      "",
      "    return new Promise((resolve, reject) => {",
      "      (async () => {",
      "        try {",
      "          const nextFilters = parseRequest(filters);",
      "          const response = await todoService.getTodoList(nextFilters);",
      "          resolve(response);",
      "        } catch (error) {",
      "          setError(error);",
      "          reject(error);",
      "        }",
      "      })();",
      "    });",
      "  }, [filters, isTrigger]);",
      "",
      "  const checkConditionPass = useCallback(",
      "    (response: ResponseGetTodoListPaging, options: { isLoadmore?: boolean } = {}) => {",
      "      const { isLoadmore } = options;",
      "",
      "      //* Check condition of response here to set data",
      "      if (isArray(response?.data)) {",
      "        if (isLoadmore) {",
      "          setData((prev) => {",
      "            let nextPages = cloneDeep(prev);",
      "            nextPages = [...(nextPages || []), ...(response?.data || [])];",
      "            return nextPages;",
      "          });",
      "        } else {",
      "          setData(response?.data);",
      "        }",
      "",
      "        setHasMore(!isEmpty(response?.data));",
      "      }",
      "    },",
      "    [filters.limit]",
      "  );",
      "",
      "  const fetchMore = useCallback(",
      "    async (shouldSetData: boolean) => {",
      "      setLoadingMore(true);",
      "      const response = await fetch();",
      "      if (shouldSetData && response) {",
      "        checkConditionPass(response, { isLoadmore: true });",
      "      }",
      "",
      "      setLoadingMore(false);",
      "    },",
      "    [fetch, checkConditionPass]",
      "  );",
      "",
      "  //* Refetch implicity (without changing loading state)",
      "  const refetch = useCallback(async () => {",
      "    try {",
      "      setRefetching(true);",
      "      const page = filters?.page || 1;",
      "",
      "      let listRequest: Promise<ResponseGetTodoListPaging>[] = [];",
      "      for (let eachPage = 0; eachPage < page; eachPage++) {",
      "        const nextFilters = parseRequest(filters);",
      "        nextFilters.page = eachPage;",
      "",
      "        const request = todoService.getTodoList(nextFilters);",
      "",
      "        listRequest = [...listRequest, request];",
      "      }",
      "",
      "      const responses = await Promise.allSettled(listRequest);",
      "      const allData = responses.map((el) => {",
      "        if (el.status === 'fulfilled') {",
      "          return isArray(el?.value?.data) ? el?.value?.data : [];",
      "        }",
      "",
      "        return [];",
      "      });",
      "      setData(flatten(allData));",
      "      setRefetching(false);",
      "    } catch (error: any) {",
      "      if (!error.isCanceled) {",
      "        showError(error);",
      "      }",
      "    }",
      "  }, [filters]);",
      "",
      "  useEffect(() => {",
      "    save(refetchKey, refetch);",
      "  }, [save, refetchKey, refetch]);",
      "",
      "  //* Refetch with changing loading state",
      "  const refetchWithLoading = useCallback(",
      "    async (shouldSetData: boolean) => {",
      "      try {",
      "        setLoading(true);",
      "        const response = await fetch();",
      "        if (shouldSetData && response) {",
      "          checkConditionPass(response);",
      "        }",
      "        setLoading(false);",
      "      } catch (error) {",
      "        showError(error);",
      "        setLoading(false);",
      "      }",
      "    },",
      "    [fetch, checkConditionPass]",
      "  );",
      "",
      "  useEffect(() => {",
      "    let shouldSetData = true;",
      "    if (filters.page !== undefined && filters.page <= 0) {",
      "      refetchWithLoading(shouldSetData);",
      "      return;",
      "    }",
      "",
      "    //* If offset > 0 -> fetch more",
      "    fetchMore(shouldSetData);",
      "",
      "    return () => {",
      "      shouldSetData = false;",
      "    };",
      "  }, [filters.page, fetchMore, refetchWithLoading]);",
      "",
      "  return {",
      "    data,",
      "    loading,",
      "    error,",
      "    refetch,",
      "    refetchWithLoading,",
      "    refetching,",
      "    loadingMore,",
      "    hasMore,",
      "    setData,",
      "  };",
      "};",
      "",
      "export default ${1};",
      ""
    ],
    "description": "genHooksInfiniteScroll"
  },
  "genComponentTable": {
    "prefix": "genComponentTable",
    "body": [
      "import React from 'react';",
      "import CommonIcons from 'components/CommonIcons';",
      "import CommonStyles from 'components/CommonStyles';",
      "import SearchAndFilters from 'components/SearchAndFilters';",
      "import { FastField } from 'formik';",
      "import TextField from 'components/CustomFields/TextField';",
      "import useFiltersHandler from 'hooks/useFiltersHandler';",
      "import { Order } from 'interfaces/common';",
      "",
      "interface $1Props {}",
      "",
      "const initialValues = {",
      "  username: '',",
      "  email: '',",
      "  page: 0,",
      "  rowsPerPage: 5,",
      "  order: Order.desc,",
      "  orderBy: '',",
      "};",
      "",
      "const $1 = (props: $1Props) => {",
      "  //! State",
      "  const {",
      "    filters,",
      "    setFilters,",
      "    selected,",
      "    handleChangePage,",
      "    handleChangeRowsPerPage,",
      "    handleRequestSort,",
      "    handleSelectAllClick,",
      "    handleResetToInitial,",
      "    handleCheckBox,",
      "  } = useFiltersHandler(initialValues);",
      "",
      "  //! Function",
      "  const totalCount = 2;",
      "",
      "  const data = [",
      "    {",
      "      id: '1',",
      "      name: 'Pham Quy Don',",
      "      email: 'donezombie@gmail.com',",
      "    },",
      "    {",
      "      id: '2',",
      "      name: 'Pham Quy Don 2',",
      "      email: 'donezombie2@gmail.com',",
      "    },",
      "  ];",
      "",
      "  //! Render",
      "  return (",
      "    <CommonStyles.Box>",
      "      <CommonStyles.Typography variant='h4' sx={{ mb: 3 }}>",
      "        $1 management",
      "      </CommonStyles.Typography>",
      "",
      "      <CommonStyles.Typography sx={{ mb: 2 }}>",
      "        <code style={{ backgroundColor: 'rgba(0, 0, 0, 0.1)', padding: 12 }}>",
      "          {JSON.stringify({ filters: { ...filters, selected } })}",
      "        </code>",
      "      </CommonStyles.Typography>",
      "",
      "      <SearchAndFilters",
      "        initialValues={initialValues}",
      "        onSubmit={(values) => {",
      "          setFilters(values);",
      "        }}",
      "        onReset={() => {",
      "          handleResetToInitial();",
      "        }}",
      "        renderFilterFields={() => {",
      "          return (",
      "            <CommonStyles.Box sx={{ gap: 2, display: 'flex' }}>",
      "              <FastField",
      "                component={TextField}",
      "                name='username'",
      "                placeholder='Username'",
      "                label='Username'",
      "              />",
      "              <FastField component={TextField} name='email' placeholder='Email' label='Email' />",
      "            </CommonStyles.Box>",
      "          );",
      "        }}",
      "      />",
      "",
      "      <CommonStyles.Box sx={{ mt: 3 }}>",
      "        <CommonStyles.Typography variant='h6' sx={{ mb: 1 }}>",
      "          Total record(s): {totalCount}",
      "        </CommonStyles.Typography>",
      "        <CommonStyles.Table",
      "          order={filters?.order || Order.desc}",
      "          orderBy={filters?.orderBy}",
      "          selected={selected}",
      "          page={filters?.page || 0}",
      "          rowsPerPage={filters?.rowsPerPage || 5}",
      "          headCells={[",
      "            {",
      "              label: 'Name',",
      "              id: 'name',",
      "            },",
      "            {",
      "              label: 'Email',",
      "              id: 'email',",
      "            },",
      "          ]}",
      "          totalCount={totalCount}",
      "          rows={data}",
      "          handleChangePage={handleChangePage}",
      "          handleChangeRowsPerPage={handleChangeRowsPerPage}",
      "          handleRequestSort={handleRequestSort}",
      "          handleSelectAllClick={handleSelectAllClick}",
      "          handleCheckBox={handleCheckBox}",
      "          showCheckBox",
      "        />",
      "      </CommonStyles.Box>",
      "    </CommonStyles.Box>",
      "  );",
      "};",
      "",
      "export default React.memo($1);",
      ""
    ],
    "description": "genComponentTable"
  },
  "genComponent": {
    "prefix": "genComponent",
    "body": [
      "import React from 'react';",
      "import CommonIcons from 'components/CommonIcons';",
      "import CommonStyles from 'components/CommonStyles';",
      "",
      "interface $1Props {}",
      "",
      "const $1 = (props: $1Props) => {",
      "  //! State",
      "",
      "  //! Function",
      "",
      "  //! Render",
      "  return <CommonStyles.Box>$1</CommonStyles.Box>;",
      "};",
      "",
      "export default React.memo($1);",
      ""
    ],
    "description": "genComponent"
  },
  "genDialogForm": {
    "prefix": "genDialogForm",
    "body": [
      "import React from 'react';",
      "import { useTranslations } from 'next-intl';",
      "import { Form, Formik, FormikHelpers, FormikValues } from 'formik';",
      "import * as Yup from 'yup';",
      "import CommonStyles from 'components/CommonStyles';",
      "",
      "export interface $1FormValues {",
      "  firstName: string;",
      "  lastName: string;",
      "}",
      "",
      "interface $1Props {",
      "  isOpen: boolean;",
      "  toggle: () => void;",
      "  onClickSignIn?: () => void;",
      "  onSubmit: (",
      "    values: $1FormValues & FormikValues,",
      "    helpers: FormikHelpers<$1FormValues & FormikValues>,",
      "    toggle: () => void",
      "  ) => void;",
      "}",
      "",
      "const $1 = (props: $1Props) => {",
      "  //! State",
      "  const { isOpen, toggle, onSubmit } = props;",
      "  const t = useTranslations();",
      "",
      "  const initalValuesSignUp: $1FormValues = {",
      "    firstName: '',",
      "    lastName: '',",
      "  };",
      "",
      "  const validationSchemaSignUp = Yup.object().shape({});",
      "",
      "  //! Function",
      "",
      "  //! Effect",
      "",
      "  //! Render",
      "  return (",
      "    <Formik",
      "      initialValues={initalValuesSignUp}",
      "      validationSchema={validationSchemaSignUp}",
      "      onSubmit={(values, helpersFormik) => onSubmit(values, helpersFormik, toggle)}",
      "      enableReinitialize",
      "    >",
      "      {({ isSubmitting }) => {",
      "        return (",
      "          <CommonStyles.Dialog",
      "            content={<Form>Content</Form>}",
      "            open={isOpen}",
      "            toggle={toggle}",
      "            disableClickOutside={false}",
      "          />",
      "        );",
      "      }}",
      "    </Formik>",
      "  );",
      "};",
      "",
      "export default React.memo($1);"
    ],
    "description": "genDialog"
  }
}
